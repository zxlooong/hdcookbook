Credential Signer notes and status:

This tool performs the following 3 steps for generating a final signed
jar with credentials:

1) Accesses the specified permission request file from the given jar file
and updates it with file credentials.

2) Signs the resulting jar file.

3) Updates the certificate chain in the resulting jar file with 
grantor's certificate chain.

For a detailed explaination see below-- "how it works" section.


Example:
--------

Step 1: Use the BDCertGenerator to generate certificates/keys.
-------
The mandatory argument for this tool is organization id.
For other options type: BDCertGenerator -help.

java -cp $SECURITY_HOME/build/security.jar:$JDK_HOME/lib/tools.jar:$SECURITY_HOME/resource/bcprov-jdk15-137.jar net.java.bd.tools.security.BDCertGenerator 56789abc

Place the generated root certificate file, app.discroot.crt, in the BDMV's CERTIFICATE directory.

Step 2: Use the BDCredentialSigner to generate credentials using grantor's and grantee keys and sign the jar{s}
-------
The mandatory arguments for this tool is the location of the permission request
file within the jarfile and the jarfile.
For other options type: BDCredentialSigner -help.

Step a) Copy the grantor's keystore to this directory and name it as:
	"grantor.store". Assuming the key aliases and passwords take the
        default values (as generated by the BDCertGenerator), here is what
        you type in step b.

Step b)
java -cp $SECURITY_HOME/build/security.jar:$JDK_HOME/lib/tools.jar:$SECURITY_HOME/resource/bcprov-jdk15-137.jar net.java.bd.tools.security.BDCredentialSigner storage/bluray.ReadFromStorageXlet.perm 00000.jar 

Make sure to put security.jar before tools.jar in the jdk distribution for the
jre classpath so that the modified version of the sun.security.* classes
in this BDSigner respository are used during the run.
bdprov-jdk15-137.jar is a bouncycastle distribution; a copy can be bound at
"resources" dir.

Status:
------
A writer Xlet that writes to the local storage works fine on most of the player
that we tried.
However, the reader throws an IOException-- basically does not map the filename to the grantor's file storage. That means either credential verfication has
failed at some point in time during the verification.


How it works :
------------

This tool is a credential generator tool. The following two steps are
involved in generating credentials.

Step 1)
Input: Permission Request File, Output: Permission Request File with credentials
This tool takes in a premission request file that has all other fields of
persistent credentials but the <signature> and the <certchainfileid>
fields/elements of the XML.
This tool generates the credentials using the keystores of the grantor and 
the grantee. And adds these fields to the permission request file.

For example consider the following input permission request file:

 <?xml version="1.0" encoding="UTF-8" standalone="no"?>
 <n:permissionrequestfile xmlns:n="urn:BDA:bdmv;PRF" appid="0x4001" orgid="0x02">
   <file value="true"/>
   <applifecyclecontrol value="true"/>
   <servicesel value="true"/>
   <userpreferences read="true" write="false"/>
  <persistentfilecredential>
      <grantoridentifier id="0x01"/>
      <expirationdate date="10/12/2010"/>
      <filename read="true" write="true">01/4000/tmp.txt</filename>
  </persistentfilecredential>
 </n:permissionrequestfile>

 
 The output permission request file looks like below:
      ......
     <persistentfilecredential>
       <grantoridentifier id="0x01"/>
       <expirationdate date="10/12/2010"/>
       <filename read="true" write="true">01/4000/tmp.txt</filename>
       <signature>KSrmmBCGY9RkOCug6HRWjBLC29VkCOKBoPAVbbxv+q7Ed4iVv6tzerrkXudjs1rez
 CYtrGysX0VK&#13;
 qKE/GlqQy2ICTWl8RVdWHFR/1KobWcsghIqtXeyR89pKrUWw8Z52o00pQsV351MrYAb7wZUzRozO&#13
 ;
 1VWAViCRoKkjHbxw/pI=</signature><certchainfileid>MGIwXTEPMA0GA1UEAwwGU3R1ZGlvMR8
 wHQYDVQQLDBZDb2Rlc2lnbmluZyBEZXBhcnRtZW50MRww&#13;
 GgYDVQQKDBNCREpDb21wYW55LjAwMDAwMDAxMQswCQYDVQQGDAJVUwIBAQ==</certchainfileid>
 </persistentfilecredential>
 </n:permissionrequestfile>
 ...

 Step 2) Input: signed jarfile, Output: signed jar file with updated certificates that includes the certchain to establish the trust cert chain of the grantor.
The certificate chain in the SIG-BD00.RSA (the signature block file) of the
signed jar is updated with the grantor's certificate chain.
