# 
# 

show 

# The features controlled by WeatherDirector
#
exports 
    segments {
	S:Initialize 
    } features { 
       F:Window.Mover
       F:WeatherImage
       F:BlankWeatherImage
       F:Location
       F:Condition
       F:Day
       F:Temp
       F:WindDirection
       F:WindSelector
       F:Speed
       F:ZipCode
    } handlers { 
    }
;

java_generated_class WeatherCommands [[ 

        import com.hdcookbook.grin.Show;
	import com.hdcookbook.grin.GrinXHelper;
        import com.hdcookbook.grin.util.Debug;
        
	public class WeatherCommands extends GrinXHelper {
	
	    public WeatherCommands(Show show) { 
		super(show); 
	    }

	    public WeatherDirector getDirector() {
		return (WeatherDirector) show.getDirector();
	    }
	
	    JAVA_COMMAND_BODY
	
	}

]]

show_top F:ShowTop ;

#
#  Use this to move the widget on the screen
#
feature translator_model F:Window.Mover
    { 0   150 30 linear-relative } ;

feature translator F:ShowTop F:Window.Mover {
    sub_feature showtop_group ;
    F:Window.Mover
} ;

feature group F:Everything {
    F:WeatherImage
    F:BlankWeatherImage
    F:LocationBar
    F:Location
    F:DayBar
    F:Day
    F:StatusBar
    F:Condition
    F:TempBar
    F:Temp
    F:ZipBar
    F:ZipCode
    F:WindSelector
} ;

#
# weather  widget 
#

feature box F:ZipBar ( 0 0 60 30 )
		outline 2 { 0 0 139 255 }
		fill { 0 0 0 255 } ;

feature box F:LocationBar ( 0 35 300 65 )
		outline 7 { 0 0 139 255 }
		fill { 0 0 139 255 } ;

feature box F:DayBar ( 230 35 300 65 )
		outline 7 { 0 0 205 255 }
		fill { 0 0 205 255 } ;

feature box F:StatusBar ( 0 195 300 225 )
		outline 7 { 0 0 139 255 }
		fill { 0 0 139 255 } ;

feature box F:TempBar ( 230 195 300 225 )
		outline 7 { 0 0 205 255 }
		fill { 0 0 205 255 } ;

feature text F:Location left 15 top 40 { "Location Name" }
    Lisa plain 16 { { 255 255 255 255 } } ;

feature text F:Condition left 15 top 200 { "Weather Report" }
    Lisa plain 16 { { 255 255 255 255 } } ;

feature text F:Day left 238 top 40 { "Now" }
    SansSerif plain 14 { { 255 255 255 255 } } ;

feature text F:Temp left 238 top 200 { "Temp" }
    SansSerif plain 14 { { 255 255 255 255 } } ;

feature text F:ZipCode left 5  top 5 { "95054" }
    SansSerif plain 14 { { 115 115 115 255 } } ;

# The radius of the circle is used by WeatherDirector
feature extension Weather:arc F:Circle
        { 92 92 92 255 }
        x 220 y 95 width 80 height 80 startAngle 0 arcAngle 360 ;

feature extension Weather:arc F:WindDirection
        { 0 0 139 255 }
        x 220 y 95 width 80 height 80 startAngle 0 arcAngle 30 ;

feature text F:Speed left 235 top 120 { "mph" }
    SansSerif plain 12 { { 255 255 255 255 } } ;

# starting point for this depends on F:LocationBar
feature fixed_image F:WeatherImage 0 65 
        images/blank_weather.png ;

feature fixed_image F:BlankWeatherImage 0 65 
        images/blank_weather.png ;

# The PollingTimer polls yahoo server for getting the latest weather info
feature timer F:PollingTimer 1440 repeat { # Every minute 
    java_command [[ getDirector().pollWeather(); ]]
} ;


feature assembly F:WindSelector  {
    default             sub_feature group {
			    F:WeatherImage
			    F:Circle
			    F:WindDirection
			    F:Speed
                        } ;

    forecast          	F:WeatherImage
} ;


rc_handler key_pressed H:Down {
       down 
    } execute {
        java_command [[ getDirector().dayNext(); ]]
    }
;

rc_handler key_pressed H:Enter {
	enter
     } execute {
	java_command [[ getDirector().zipDone(); ]]
     }
;

rc_handler key_pressed H:Left {
	left
     } execute {
	java_command [[ getDirector().zipErased(); ]]
     }
;

# There must be a better way to handle key events
# all at once, while still being able to determine which
# key was pressed.

rc_handler key_pressed H:Zero {
	0
      } execute {
	java_command [[ getDirector().zipEntered('0'); ]]
      }
;

rc_handler key_pressed H:One {
	1
      } execute {
	java_command [[ getDirector().zipEntered('1'); ]]
      }
;

rc_handler key_pressed H:Two {
	2
      } execute {
	java_command [[ getDirector().zipEntered('2'); ]]
      }
;

rc_handler key_pressed H:Three {
	3
      } execute {
	java_command [[ getDirector().zipEntered('3'); ]]
      }
;

rc_handler key_pressed H:Four {
	4
      } execute {
	java_command [[ getDirector().zipEntered('4'); ]]
      }
;

rc_handler key_pressed H:Five {
	5
      } execute {
	java_command [[ getDirector().zipEntered('5'); ]]
      }
;

rc_handler key_pressed H:Six {
	6
      } execute {
	java_command [[ getDirector().zipEntered('6'); ]]
      }
;

rc_handler key_pressed H:Seven {
	7
      } execute {
	java_command [[ getDirector().zipEntered('7'); ]]
      }
;

rc_handler key_pressed H:Eight {
	8
      } execute {
	java_command [[ getDirector().zipEntered('8'); ]]
      }
;

rc_handler key_pressed H:Nine {
	9
      } execute {
	java_command [[ getDirector().zipEntered('9'); ]]
      }
;

#
# Start of segments
#

segment S:Initialize 
    setup { 
	F:Everything
    } on_entry {
	java_command [[ 
	    Debug.println();
	    Debug.println("***  Initializing Weather Widget ***"); 
	    Debug.println();
	]]
	java_command [[ 
	    getDirector().initialize();
	]]
    } setup_done {
	java_command [[
	    WeatherDirector dir = getDirector();
	    dir.pollWeather();
 	]]	
  	activate_segment S:Showing ;
    }
;


segment S:Showing
    active {
	F:ZipBar
        F:ZipCode
    	F:LocationBar
        F:Location
	F:DayBar
	F:Day
	F:WindSelector
    	F:StatusBar
   	F:Condition
	F:TempBar
	F:Temp
	F:PollingTimer
    } setup {
	F:Everything
    } rc_handlers {
	H:Down
	H:Enter
	H:Left
	H:Zero
	H:One
	H:Two
	H:Three
	H:Four
	H:Five
	H:Six
	H:Seven
	H:Eight
	H:Nine
    }
;
end_show
