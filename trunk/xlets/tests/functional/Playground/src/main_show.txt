#
#  The show file for the main menu
#


show

exports
    segments { 
	S:Initialize 
    } features {
	F:MainScaler
	F:BoxedStuffPosition
	F:BoxedStuffFade
	F:EnterText
	F:ReplaceImage.Image
	F:AC.Assembly
	F:AC.ClonedGroup
    } handlers {
    }
;

java_generated_class MainShowCommands [[

    import com.hdcookbook.grin.Show;
    import com.hdcookbook.grin.GrinXHelper;
    import java.util.Random;

    public class MainShowCommands extends GrinXHelper {

	private static Random random = new Random();

	public MainShowCommands(Show show) {
	    super(show);
	}

	public MainDirector getMainDirector() {
	    return (MainDirector) show.getDirector();
	}

	JAVA_COMMAND_BODY 

    }

]]

segment S:Initialize
    setup {
	F:Everything
    } setup_done {
	activate_segment S:Main ;
    }
;


#########################################################
#			MAIN MENU			#
#########################################################

segment S:Main 
    active {
	F:MainText
	F:EnterAssembly
    } setup {
	F:Everything
    } rc_handlers {
	H:1 H:2 H:3 H:4 H:5 H:6
	H:EnterPress H:EnterRelease
    }
;

feature group F:Everything {
    F:MainText
    F:ProgrammaticDemo
    F:EnterAssembly
    F:FadeTestEverything
} ;

feature text F:MainText
	left 200 top 200 {
	    "Press a number key..."
	    "     1 - Restore Normal Menu"
	    "     2 - Put new show on top of menu"
	    "     3 - Show programmatic control of scene graph"
	    "     4 - Run show with extension feature"
	    "     5 - Run regression test for issue 121 (fade and redisplay)"
	    "     6 - Run regression test for issue 131 (assembly and cloning)"
	}
	SansSerif plain 32 { { 255 255 255 255 } }
	background { 0 0 0 255 } 
;

rc_handler key_pressed H:1 { 1 } execute {
    java_command [[ 
	getMainDirector().restoreNormalMenu();
    ]]
} ;

rc_handler key_pressed H:2 { 2 } execute {
    java_command [[
	getMainDirector().putNewShowOnTopOfMenu("S:Initialize");
    ]]
} ;

rc_handler key_pressed H:3 { 3 } execute {
    activate_segment S:ProgrammaticSceneGraphControl ;
} ;

rc_handler key_pressed H:4 { 4 } execute {
    java_command [[ 
	getMainDirector().putNewShowOnTopOfMenu("S:ExtensionTest");
    ]]
} ;

rc_handler key_pressed H:5 { 5 } execute {
	activate_segment S:FadeTest ;
} ;

rc_handler key_pressed H:6 { 6 } execute {
	activate_segment S:AssemblyCloneTest ;
} ;

rc_handler key_pressed H:EnterPress { enter } execute {
	activate_part F:EnterAssembly press ;
} ;

rc_handler key_released H:EnterRelease { enter } execute {
	activate_part F:EnterAssembly release ;
} ;

#########################################################
#	    PROGRAMMATIC SCENE GRAPH CONTROL		#
#########################################################


    # A scaling model to flip a couple of images and a box
    # around.  To make a scaling_model programmable, you specify
    # just one key frame, and then you programmatically set the
    # values of the parameters to something different.

feature scaling_model F:MainScaler 
	    { 0 980 560 1000 1000 mills }
;

    # A box that gets scaled by our scaler

feature box F:Box ( 800 440 1400 750 )
	outline 30 { 0 0 255 255 }
	scaling_model F:MainScaler 
;

    # A turtle that gets scaled by our scaler

feature fixed_image F:TurtleSaucer ( left 1050 middle 580 )
	"images/turtle_saucer.png"
	scaling_model F:MainScaler 
;

    # An animated yin/yang that gets scaled by our scaler

feature image_sequence F:YinYang ( left 900 middle 580 )
	"images/yinyang/Load_" {
		0000 0001 0002 0003 0004 0005 0006 0007
		0008 0009 0010 0011 0012 0013 0014 0015
	 } ".png"
	 repeat
	 scaling_model F:MainScaler 
;

    # A group containing the stuff in the box, all of which gets
    # scaled

feature group F:BoxedStuffGroup {
	F:MainScaler 
	F:Box 
	F:TurtleSaucer 
	F:YinYang
} ;

    # And a programmatically controlled fade that we use to make the
    # box fade in and out randomly.

feature fade F:BoxedStuffFade F:BoxedStuffGroup {
	    0	255 linear		
	    # 1 entry means "this is the default value for programmatic control"
    }
;


    # A translator and translator_model to move F:BoxedStuffGroup around.
    # The model only has one entry, because we set the value programmatically.

feature translator_model F:BoxedStuffPosition {
    	0 	0 0 	linear-relative
} ;

feature translator F:BoxTranslator F:BoxedStuffPosition {
 	F:BoxedStuffFade
} ;

    # Now, some text (that we change programmatically), plus an
    # assembly/fade combo we use to randomly make it fade out then in
    # from time to time.

feature text F:EnterText
	middle 980 baseline 540 {
	    "Press enter"
	    "to return"
	}
	SansSerif plain 180 { { 0 255 0 255 } }
	background { 0 0 0 255 } 
;

feature fade F:FadeText F:EnterText {
	    0	255 linear
	   11	  0 linear
	   23	255 linear
    } end_commands {
	activate_part F:TextAssembly normal ;
    }
;

feature assembly F:TextAssembly {
	normal	F:EnterText
	fading	F:FadeText
    }
;

    #  Now, something to show when the enter key is pressed, and (if supported
    #  by the player) released.

feature assembly F:EnterAssembly {
	normal	sub_feature group { } ;
	press   sub_feature group {
		    sub_feature timer 20 { activate_part F:EnterAssembly normal ; } ;
		    sub_feature text middle 980 baseline 960 { "Enter Pressed" }
		    	SansSerif plain 36 { { 255 0 0 255 } }
			background { 0 0 0 255 } ;
		} ;
	release sub_feature group {
		    sub_feature timer 20 { activate_part F:EnterAssembly normal ; } ;
		    sub_feature text middle 980 baseline 960 { "Enter Released " }
		    	SansSerif plain 36 { { 255 0 0 255 } }
			background { 0 0 0 255 } ;
		} ;
} ;

    # This is cute:  We make a timer on every frame that flips
    # a coin, and sometimes makes the text fade out for a beat.
    # If the text is already going through a fade, nothing happens,
    # because we just re-select the assembly.
    #
    # This could could equally well have been put directly into
    # the implementation of Director.notifyNextFrame(), or as a method
    # of MainDirector, as is done for the other programmatic control 
    # being shown.  These latter two are somewhat more elegant,
    # since we have a natural place for the instance data member.
    # Because many instances of MainShowCommands get created, we don't
    # want to define any instance data members on this class.

feature timer F:ChangeSceneGraphTimer 1 repeat {
	java_command [[
	    if (random.nextInt(80) == 42) {
		GRIN_COMMAND_[[
		    activate_part F:TextAssembly fading ;
		]]
	    }
	    getMainDirector().programmaticallyChageSceneGraph();
	]]
    }
;

    #
    # An animated yin/yang to test the fix of issue number 117,
    # "Null images in image sequences are broken"
    #

feature image_sequence F:Issue117 ( left 50 top 50 scale 500 500 mills )
	"images/yinyang/Load_" {
		0000 + + 0001 + + 0002 + + 0003 + + 0004 + + 
		0005 + + 0006 + + 0007 + + 0008 + + 0009 + +
		0010 + + 0011 + + 0012 + + 0013 + + 0014 + + 
		0015 + +
		- - - - - - - - - -
	 } ".png"
	 repeat
	 scaling_model F:MainScaler 
;

    #
    # An extension feature that's a frame around a fixed_image.  This is kind
    # of silly as an extension feature; it's a contrived example,
    # made to test forward references in an extension parser.
    # The RFE for that was issue 130.
    #

feature extension Playground:image_frame F:ReplaceImage.Frame
	F:ReplaceImage.Image
	outline 10 { 255 0 0 255 }		# Red
;

    #
    #  A fixed_image whose contents we swap with an image that we load
    #  and unload under programmatic control.  This RFE was issue 126.
    #
feature fixed_image F:ReplaceImage.Image ( middle 100 middle 850 )
	"images/pope.jpg"
;


feature group F:ReplaceImage {
    F:ReplaceImage.Frame
    F:ReplaceImage.Image
    sub_feature timer 1 repeat { java_command [[
	getMainDirector().replaceImage();
    ]] } ;
} ;

    #  Finaly, we put the whole scene graph in one group, which makes
    # it a bit easier to list in F:Everything.

feature group F:ProgrammaticDemo {
	F:TextAssembly
	F:ChangeSceneGraphTimer
    	F:BoxTranslator
	F:BoxedStuffPosition
	F:Issue117
	F:ReplaceImage
} ;

    # Then, a segment to show it, and an RC handler to get us back to the
    # menu

segment S:ProgrammaticSceneGraphControl
	active { F:ProgrammaticDemo }
	setup { F:Everything }
	rc_handlers { H:ProgrammaticEscape }
	on_entry {
	} 
;

rc_handler key_pressed H:ProgrammaticEscape { enter } execute {
    java_command [[  getMainDirector().stopImageReplacement(); ]]
    activate_segment S:Main ;
} ;


#########################################################
#	    FADE TEST (Issue 121 regression test)       #
#########################################################

feature text F:FadeTestText 100 100 {
	"You should see a faded blue rectangle.  Press enter to continue"
    } SansSerif plain 48 { { 255 255 255 255 } } ;

feature text F:FadeTestText2 100 100 {
	"You should see an opaque blue rectangle.  Press enter to go back to menu"
    } SansSerif plain 48 { { 255 255 255 255 } } ;


feature box F:Red ( 100 200 960 980 ) 
	fill { 255 0 0 255 } ;

feature box F:Green ( 960 200 1820 980 )
	fill { 0 255 0 255 } ;

feature box F:Blue ( 500 400 1400 800 )
	fill { 0 0 255 255 } ;

feature fade F:FadedBlue F:Blue src_over {  0 100 linear } ;


feature group F:FadeTestEverything {
	F:Red F:Green F:FadedBlue 
} ;

rc_handler key_pressed H:FadeTest { enter } execute {
    java_command [[ 
	getMainDirector().getShow().segmentDone();
		// This is the same as just saying "segment_done".  It's
		// done here to test the method on Show.

	getMainDirector().getShow().syncDisplay();
		// Similarly, this is just to test the method on Show.
    ]]
} ;

segment S:FadeTest 
   active {
	F:Red
	F:Green
	F:FadedBlue
	F:FadeTestText
    } setup {
	F:Everything
    } rc_handlers {
	H:FadeTest
    } next {
	activate_segment S:FadeTest_2 ;
    }
;

segment S:FadeTest_2
   active {
	F:Red
	F:Green
	F:Blue
	F:FadeTestText2
    } setup {
	F:Everything
    } rc_handlers {
	H:FadeTest
    } next {
	activate_segment S:Main ;
    }
;

###################################################################
#	    ASSEMBLY CLONE TEST (Issue 131 regression test)       #
###################################################################

feature text F:AC.Text 
	left 200 top 200 {
		"If you see this, it worked.  Press enter."
	}
	SansSerif plain 72 { { 0 255 0 255 } }
	background { 0 0 0 255 }  ;

feature assembly F:AC.Assembly {
    first	F:AC.Text
    second	F:AC.Text
} ;

feature group F:AC.ClonedGroup {
} ;

segment S:AssemblyCloneTest
   active {
    } setup {
	F:Everything
	F:AC.Assembly
	F:AC.ClonedGroup
    } rc_handlers {
    } next {
	java_command [[ getMainDirector().createAssemblyCloneTest(); ]]
	activate_segment S:AssemblyCloneTest_2 ;
    }
;

segment S:AssemblyCloneTest_2
    active {
	F:AC.ClonedGroup	# It's populated in createAssemblyCloneTest() 
    } setup {
	F:Everything
	F:AC.Assembly
	F:AC.ClonedGroup
    } rc_handlers {
	H:ACTest
    } next {
	java_command [[ getMainDirector().destroyAssemblyCloneTest(); ]]
	activate_segment S:Main ;
    }
;


rc_handler key_pressed H:ACTest { enter } execute { segment_done ; } ;

end_show 
