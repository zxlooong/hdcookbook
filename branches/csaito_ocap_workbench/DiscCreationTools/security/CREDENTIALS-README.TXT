Credential Signer notes and status:

This tool can be used in three ways:

1) Grantor side: generated credentials.
    Command line option: -gencred
    Input: Permission request file, Access to grantor's private key
           for signing (keystore info) and application disc root certificate
	   of the grantee. 
    Output: A permission request file with signed credentials
	    Grantor certificate chain stored in the file: "grantorchain.crt"
    Example: This example specifies all the optional arguments, please check
	     the default values to save typing.
    $.BDCredentialSigner -gencred -gastore my.keystore -gastorepass mypass\
	-gaalias mycert -gakeypass mypass -gecert grantee.discroot.crt\ 
	bluray.MyXlet.perm

    The above command line results in permission request file that is populated
    with credentials elements.
    The grantor certificate chain is store in the file: "grantorchain.crt" 

2) Grantee side: Sign the jar with updated credentials.
    Command line option: -updatecerts
    Input: Permission request file with credentials,
	grantor's certificate chain. Both of these are received
	from the grantor.
	Grantee private key information for signing the jar (keystore info).
	The jar file that uses the credentials and needs to be signed.
    Output: The signed jar file updated with credentials.
    Example:
    $.BDCredentialSigner -updatecert -gestore my.keystore -gestorepass mypass\
	-alias mycert -keypass mypass -gacerts grantorchain.crt\
	myxlet/bluray.MyXlet.perm 00000.jar 

3) If none of the above options are specified, then the tool performs both
   the steps above. This is useful for testing purposes.

    Note: In this case the speicifed permission request file is extracted
    from the specified jarfile to be signed.

    Input: Grantor and Grantee's keystore information for signing.
	  Location of permission request file with in the given jarfile
          to be signed
    Output: The signed jar file updated with credentials.
 
    Example:
    $.BDCredentialSigner -gastore my.keystore -gastorepass mypass\
	-gaalias mycert -gakeypass mypass \ 
        -gestore my.keystore -gestorepass mypass -alias mycert -keypass mypass\ 
	myxlet/bluray.MyXlet.perm 00000.jar 
   
For a detailed explaination see below.

The following two steps are involved in the generation of credentials.

Step 1)
Generation of credentials-- Grantor side.
Input: Permission Request File.
Output: Permission Request File with credentials
The premission request file that has all other fields of
persistent credentials but the <signature> and the <certchainfileid>
fields/elements of the XML.

For example consider the following input permission request file:

 <?xml version="1.0" encoding="UTF-8" standalone="no"?>
 <n:permissionrequestfile xmlns:n="urn:BDA:bdmv;PRF" appid="0x4001" orgid="0x02">
   <file value="true"/>
   <applifecyclecontrol value="true"/>
   <servicesel value="true"/>
   <userpreferences read="true" write="false"/>
  <persistentfilecredential>
      <grantoridentifier id="0x01"/>
      <expirationdate date="10/12/2010"/>
      <filename read="true" write="true">01/4000/tmp.txt</filename>
  </persistentfilecredential>
 </n:permissionrequestfile>

 
 The output permission request file looks like below:
      ......
     <persistentfilecredential>
       <grantoridentifier id="0x01"/>
       <expirationdate date="10/12/2010"/>
       <filename read="true" write="true">01/4000/tmp.txt</filename>
       <signature>KSrmmBCGY9RkOCug6HRWjBLC29VkCOKBoPAVbbxv+q7Ed4iVv6tzerrkXudjs1rez
 CYtrGysX0VK&#13;
 qKE/GlqQy2ICTWl8RVdWHFR/1KobWcsghIqtXeyR89pKrUWw8Z52o00pQsV351MrYAb7wZUzRozO&#13
 ;
 1VWAViCRoKkjHbxw/pI=</signature><certchainfileid>MGIwXTEPMA0GA1UEAwwGU3R1ZGlvMR8
 wHQYDVQQLDBZDb2Rlc2lnbmluZyBEZXBhcnRtZW50MRww&#13;
 GgYDVQQKDBNCREpDb21wYW55LjAwMDAwMDAxMQswCQYDVQQGDAJVUwIBAQ==</certchainfileid>
 </persistentfilecredential>
 </n:permissionrequestfile>
 ...

 Step 2)
 Input: -Grantor certificate chain
        -Permission request file generated by Step 1 and properly named
	 and placed in the right directory for inclusion into the jar file.
	-Jar file to be signed

 Output: signed jar file with updated certificates that includes the certchain
         to establish the trust cert chain of the grantor.
	 The certificate chain in the SIG-BD00.RSA (the signature block file)
	 of the signed jar is updated with the grantor's certificate chain.
